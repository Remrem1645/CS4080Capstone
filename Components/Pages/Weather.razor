@page "/"
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IJSRuntime JS

<PageTitle>Current Weather</PageTitle>

<main class="bg-[#293251] text-white w-full m-0 p-0 h-screen overflow-hidden">
    <h1 class="font-medium text-5xl text-center">Current Weather</h1>
    

@if (weatherData?.Location != null && weatherData.Current != null)
{

    <section class="flex flex-col items-center">
        <div class="inline-flex">
            <h2 class="text-7xl">@(showF ? weatherData.Current.Temp_F : weatherData.Current.Temp_C) °@(showF ? "F": "C")</h2>
            <svg
                @onclick="SwapTemp"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                class="mx-2 w-7 cursor-pointer"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M19.5 12c0-1.232-.046-2.453-.138-3.662a4.006 4.006 0 0 0-3.7-3.7 48.678 48.678 0 0 0-7.324 0 4.006 4.006 0 0 0-3.7 3.7c-.017.22-.032.441-.046.662M19.5 12l3-3m-3 3-3-3m-12 3c0 1.232.046 2.453.138 3.662a4.006 4.006 0 0 0 3.7 3.7 48.656 48.656 0 0 0 7.324 0 4.006 4.006 0 0 0 3.7-3.7c.017-.22.032-.441.046-.662M4.5 12l3 3m-3-3-3 3"
                />
            </svg>
        </div>
        <h2 class="text-xl">@weatherData.Location.Name, @weatherData.Location.Region (@weatherData.Location.FormattedTime)</h2>
        <h2 class="text-xl"><i>@weatherData.Current.Condition.Text</i></h2>
        <h2 class="text-sm">Last Updated: @weatherData.Current.FormattedLast_Updated</h2>
    </section>

    <section class="columns-3 mt-5 gap-2 mx-10 h-full">
        <div
            class="bg-[#384266] text-center rounded-l-lg flex flex-col items-center py-6 space-y-4"
        >
            <h3 class="text-[#a8d0f4] text-3xl">@weatherData.Current.Cloud%</h3>
            <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="currentColor"
                class="w-12"
                viewBox="0 0 16 16"
            >
                <path
                    d="M3 13.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m10.405-9.473a5.001 5.001 0 0 0-9.499-1.004A3.5 3.5 0 1 0 3.5 12H13a3 3 0 0 0 .405-5.973"
                />
            </svg>
            <h3 class="text-xl">Clouds</h3>
        </div>
        <div
            class="bg-[#384266] text-center flex flex-col items-center py-6 space-y-4"
        >
            <h3 class="text-[#a8d0f4] text-3xl">@weatherData.Current.Humidity%</h3>
            <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="currentColor"
                class="w-12"
                viewBox="0 0 16 16"
            >
                <path
                    fill-rule="evenodd"
                    d="M7.21.8C7.69.295 8 0 8 0q.164.544.371 1.038c.812 1.946 2.073 3.35 3.197 4.6C12.878 7.096 14 8.345 14 10a6 6 0 0 1-12 0C2 6.668 5.58 2.517 7.21.8m.413 1.021A31 31 0 0 0 5.794 3.99c-.726.95-1.436 2.008-1.96 3.07C3.304 8.133 3 9.138 3 10c0 0 2.5 1.5 5 .5s5-.5 5-.5c0-1.201-.796-2.157-2.181-3.7l-.03-.032C9.75 5.11 8.5 3.72 7.623 1.82z"
                />
                <path
                    fill-rule="evenodd"
                    d="M4.553 7.776c.82-1.641 1.717-2.753 2.093-3.13l.708.708c-.29.29-1.128 1.311-1.907 2.87z"
                />
            </svg>
            <h3 class="text-xl">Humidity</h3>
        </div>
        <div
            class="bg-[#384266] text-center rounded-r-lg flex flex-col items-center py-6 space-y-4"
        >
            <h3 class="text-[#a8d0f4] text-3xl">@weatherData.Current.Wind_Mph MPH, @weatherData.Current.Wind_Dir </h3>
            <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="currentColor"
                class="w-12"
                viewBox="0 0 16 16"
            >
                <path
                    d="M12.5 2A2.5 2.5 0 0 0 10 4.5a.5.5 0 0 1-1 0A3.5 3.5 0 1 1 12.5 8H.5a.5.5 0 0 1 0-1h12a2.5 2.5 0 0 0 0-5m-7 1a1 1 0 0 0-1 1 .5.5 0 0 1-1 0 2 2 0 1 1 2 2h-5a.5.5 0 0 1 0-1h5a1 1 0 0 0 0-2M0 9.5A.5.5 0 0 1 .5 9h10.042a3 3 0 1 1-3 3 .5.5 0 0 1 1 0 2 2 0 1 0 2-2H.5a.5.5 0 0 1-.5-.5"
                />
            </svg>
            <h3 class="text-xl">Wind</h3>
        </div>
    </section>
}
else
{
    <p><em>Loading...</em></p>
}

<button @onclick="RefreshWeather">Refresh Data</button>
</main>

<script>
    window.getCoords = async () => {
        const pos = await new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(resolve, reject);
        });
        return pos.coords.latitude + ', ' + pos.coords.longitude
    };
</script>

@code {
    private WeatherDataResponse? weatherData;
    @* private Program? program = new Program(); *@
    private RequestParameters requestParameters = new RequestParameters 
        { 
        URL = "http://api.weatherapi.com/v1",
        CurrentLocation = "0, 0",
        };

    private HttpClient? client;
    protected override async Task OnInitializedAsync()
    {
        @* requestParameters.CurrentLocation = geoLocation; *@
        // Make sure to set the API key in the appsettings.json file and appsettings.Development.json file
        requestParameters.ApiKey = Configuration["WeatherApiKey"] ?? 
            throw new InvalidOperationException("API key not configured.");

        client = new HttpClient{BaseAddress = new Uri(requestParameters.URL)};
        client.DefaultRequestHeaders.Accept.Add(
            new MediaTypeWithQualityHeaderValue("application/json"));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await base.OnInitializedAsync();
            var geoLocation = await GetLocation();
            Console.WriteLine(geoLocation);
            requestParameters.CurrentLocation = geoLocation;

            await RefreshWeather();
            StateHasChanged();
        }
    }

    private async Task<string> GetLocation()
    {
        return await JS.InvokeAsync<string>("getCoords");
    }

    private async Task RefreshWeather() {
        if (client == null) return;

        HttpResponseMessage response = 
            await client.GetAsync(requestParameters.RequestURL);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Retrieved data");
            var data = await response.Content.ReadAsStringAsync();
            weatherData = JsonSerializer.Deserialize<WeatherDataResponse>(data);
        }
        else
        {
            Console.WriteLine("Failed to get data");
        }
    }

    private bool showF = true;
    private void SwapTemp() {
        Console.WriteLine("clicked");
        showF = !showF;
    }


    private class RequestParameters
    {
        public required string URL { get; set; }
        public required string CurrentLocation { get; set; }
        public string ApiKey { get; set; } = "";

        public string RequestURL => 
            URL 
            + "/current.json"
            + "?key=" + ApiKey
            + " &q=" + CurrentLocation
            + "&aqi=no";
    }
}
